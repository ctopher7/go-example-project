// Code generated by mockery v2.21.1. DO NOT EDIT.

package io

import (
	fs "io/fs"
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// OsClose provides a mock function with given fields: file
func (_m *MockRepository) OsClose(file *os.File) error {
	ret := _m.Called(file)

	var r0 error
	if rf, ok := ret.Get(0).(func(*os.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OsOpen provides a mock function with given fields: name
func (_m *MockRepository) OsOpen(name string) (*os.File, error) {
	ret := _m.Called(name)

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAll provides a mock function with given fields: file
func (_m *MockRepository) ReadAll(file *os.File) ([]byte, error) {
	ret := _m.Called(file)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*os.File) ([]byte, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*os.File) []byte); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*os.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDir provides a mock function with given fields: dirname
func (_m *MockRepository) ReadDir(dirname string) ([]fs.FileInfo, error) {
	ret := _m.Called(dirname)

	var r0 []fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]fs.FileInfo, error)); ok {
		return rf(dirname)
	}
	if rf, ok := ret.Get(0).(func(string) []fs.FileInfo); ok {
		r0 = rf(dirname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dirname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
